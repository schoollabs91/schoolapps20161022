package com.lab.kot.school.model.eo;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Oct 02 20:39:37 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SClassEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ClassId,
        ClassCode,
        ClassName,
        ActiveYn;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int CLASSID = AttributesEnum.ClassId.index();
    public static final int CLASSCODE = AttributesEnum.ClassCode.index();
    public static final int CLASSNAME = AttributesEnum.ClassName.index();
    public static final int ACTIVEYN = AttributesEnum.ActiveYn.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SClassEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.lab.kot.school.model.eo.SClassEO");
    }

    /**
     * Gets the attribute value for ClassId, using the alias name ClassId.
     * @return the value of ClassId
     */
    public Long getClassId() {
        return (Long) getAttributeInternal(CLASSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ClassId.
     * @param value value to set the ClassId
     */
    public void setClassId(Long value) {
        setAttributeInternal(CLASSID, value);
    }

    /**
     * Gets the attribute value for ClassCode, using the alias name ClassCode.
     * @return the value of ClassCode
     */
    public String getClassCode() {
        return (String) getAttributeInternal(CLASSCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ClassCode.
     * @param value value to set the ClassCode
     */
    public void setClassCode(String value) {
        setAttributeInternal(CLASSCODE, value);
    }

    /**
     * Gets the attribute value for ClassName, using the alias name ClassName.
     * @return the value of ClassName
     */
    public String getClassName() {
        return (String) getAttributeInternal(CLASSNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ClassName.
     * @param value value to set the ClassName
     */
    public void setClassName(String value) {
        setAttributeInternal(CLASSNAME, value);
    }

    /**
     * Gets the attribute value for ActiveYn, using the alias name ActiveYn.
     * @return the value of ActiveYn
     */
    public String getActiveYn() {
        return (String) getAttributeInternal(ACTIVEYN);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActiveYn.
     * @param value value to set the ActiveYn
     */
    public void setActiveYn(String value) {
        setAttributeInternal(ACTIVEYN, value);
    }


    /**
     * @param classId key constituent
     * @param classCode key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Long classId, String classCode) {
        return new Key(new Object[] { classId, classCode });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl tranSeq = new SequenceImpl("LIST_ID", this.getDBTransaction());        
        Number tNumber = tranSeq.getSequenceNumber();
        this.setClassId(tNumber.longValue());
    }
}

